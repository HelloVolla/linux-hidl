From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Marius Gripsgard <marius@ubports.com>
Date: Tue, 6 Nov 2018 01:22:41 +0100
Subject: [PATCH] Fix bulding on gcc5

---
 base/include/hidl/HidlSupport.h        | 6 +++---
 base/include/hidl/Status.h             | 4 ++--
 transport/ServiceManagement.cpp        | 1 +
 transport/include/hidl/ConcurrentMap.h | 1 +
 4 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/src/libhidl/base/include/hidl/HidlSupport.h b/src/libhidl/base/include/hidl/HidlSupport.h
index 93a625122b0b75d212a151a3df4c8020c274692f..82f7983a4849c5963600a610fd3d73f7e08a28c4 100644
--- a/src/libhidl/base/include/hidl/HidlSupport.h
+++ b/src/libhidl/base/include/hidl/HidlSupport.h
@@ -523,7 +523,7 @@ struct hidl_vec {
     }
 
     // offsetof(hidl_string, mBuffer) exposed since mBuffer is private.
-    static const size_t kOffsetOfBuffer;
+    static const size_t kOffsetOfBuffer = offsetof(hidl_vec<T>, mBuffer);
 
 private:
     // Define std interator interface for walking the array contents
@@ -593,8 +593,8 @@ private:
     }
 };
 
-template <typename T>
-const size_t hidl_vec<T>::kOffsetOfBuffer = offsetof(hidl_vec<T>, mBuffer);
+/*template <typename T>
+const size_t hidl_vec<T>::kOffsetOfBuffer = offsetof(hidl_vec<T>, mBuffer);*/
 
 ////////////////////////////////////////////////////////////////////////////////
 
diff --git a/src/libhidl/base/include/hidl/Status.h b/src/libhidl/base/include/hidl/Status.h
index 817277f76566d356df7bfc3bba9165d3ee49dc78..ac2127ff1301f4c0e1933114d52c0494e89928a0 100644
--- a/src/libhidl/base/include/hidl/Status.h
+++ b/src/libhidl/base/include/hidl/Status.h
@@ -247,8 +247,8 @@ public:
     // move-able.
     // precondition: "this" has checked status
     // postcondition: other is safe to destroy after moving to *this.
-    Return(Return&& other) noexcept = default;
-    Return& operator=(Return&&) noexcept = default;
+    Return(Return&& other) = default;
+    Return& operator=(Return&&) = default;
 
     ~Return() = default;
 
diff --git a/src/libhidl/transport/ServiceManagement.cpp b/src/libhidl/transport/ServiceManagement.cpp
index 5415dbb1b8469e15c7c01109c7d3f10409e8e7d4..d4a3b9af078583d7d0db325d7fe86fefe3da947c 100644
--- a/src/libhidl/transport/ServiceManagement.cpp
+++ b/src/libhidl/transport/ServiceManagement.cpp
@@ -483,6 +483,7 @@ struct PassthroughServiceManager : IServiceManager1_1 {
                         if (!implName.empty()) instanceName += " ("s + implName + ")"s;
                         map.emplace(path + lib, InstanceDebugInfo{.interfaceName = matchedName,
                                                                   .instanceName = instanceName,
+                                                                  .pid = -1,
                                                                   .clientPids = {},
                                                                   .arch = arch});
                     }
diff --git a/src/libhidl/transport/include/hidl/ConcurrentMap.h b/src/libhidl/transport/include/hidl/ConcurrentMap.h
index 329752ca97a4adbd1cf31254f0870a03be4e4e87..033fb27bafd5c1f909b51a81dea205a39ec23e24 100644
--- a/src/libhidl/transport/include/hidl/ConcurrentMap.h
+++ b/src/libhidl/transport/include/hidl/ConcurrentMap.h
@@ -68,6 +68,7 @@ public:
 
     void setLocked(K&& k, V&& v) { mMap[std::forward<K>(k)] = std::forward<V>(v); }
     void setLocked(K&& k, const V& v) { mMap[std::forward<K>(k)] = v; }
+    void setLocked(const K& k, const V& v) { mMap[k] = v; }
 
     const V& getLocked(const K& k, const V& def) const {
         const_iterator iter = mMap.find(k);
